// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartTestProj.DAL.Context;

#nullable disable

namespace SmartTestProj.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartTestProj.DAL.Entities.EquipmentPlacementContract", b =>
                {
                    b.Property<Guid>("ProductionFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProcessEquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitsCount")
                        .HasColumnType("int");

                    b.HasKey("ProductionFacilityId", "ProcessEquipmentTypeId");

                    b.HasIndex("ProcessEquipmentTypeId")
                        .IsUnique();

                    b.HasIndex("ProductionFacilityId")
                        .IsUnique();

                    b.ToTable("EquipmentPlacementContract");

                    b.HasData(
                        new
                        {
                            ProductionFacilityId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            ProcessEquipmentTypeId = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            UnitsCount = 25
                        },
                        new
                        {
                            ProductionFacilityId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            ProcessEquipmentTypeId = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            UnitsCount = 15
                        },
                        new
                        {
                            ProductionFacilityId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            ProcessEquipmentTypeId = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            UnitsCount = 30
                        },
                        new
                        {
                            ProductionFacilityId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            ProcessEquipmentTypeId = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            UnitsCount = 20
                        },
                        new
                        {
                            ProductionFacilityId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82266"),
                            ProcessEquipmentTypeId = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            UnitsCount = 10
                        });
                });

            modelBuilder.Entity("SmartTestProj.DAL.Entities.ProcessEquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProcessEquipmentType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Area = 50,
                            Name = "Wood Processing"
                        },
                        new
                        {
                            Id = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Area = 100,
                            Name = "Textile Mill"
                        },
                        new
                        {
                            Id = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            Area = 180,
                            Name = "Paper Mill"
                        },
                        new
                        {
                            Id = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            Area = 120,
                            Name = "Food Processing Plant"
                        },
                        new
                        {
                            Id = new Guid("abd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            Area = 140,
                            Name = "Glass Factory"
                        });
                });

            modelBuilder.Entity("SmartTestProj.DAL.Entities.ProductionFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StandartArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductionFaciliti");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Name = "Hangar 1",
                            StandartArea = 120
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Name = "Hangar 2",
                            StandartArea = 200
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            Name = "Hangar 3",
                            StandartArea = 50
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            Name = "Hangar 4",
                            StandartArea = 100
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            Name = "Hangar 5",
                            StandartArea = 150
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82266"),
                            Name = "Hangar 6",
                            StandartArea = 150
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82267"),
                            Name = "Hangar 7",
                            StandartArea = 130
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82268"),
                            Name = "Hangar 8",
                            StandartArea = 190
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82269"),
                            Name = "Hangar 9",
                            StandartArea = 200
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82270"),
                            Name = "Hangar 10",
                            StandartArea = 150
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTestProj.DAL.Entities.EquipmentPlacementContract", b =>
                {
                    b.HasOne("SmartTestProj.DAL.Entities.ProcessEquipmentType", "ProcessEquipmentType")
                        .WithOne("EquipmentPlacementContract")
                        .HasForeignKey("SmartTestProj.DAL.Entities.EquipmentPlacementContract", "ProcessEquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTestProj.DAL.Entities.ProductionFacility", "ProductionFacility")
                        .WithOne("EquipmentPlacementContract")
                        .HasForeignKey("SmartTestProj.DAL.Entities.EquipmentPlacementContract", "ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessEquipmentType");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("SmartTestProj.DAL.Entities.ProcessEquipmentType", b =>
                {
                    b.Navigation("EquipmentPlacementContract");
                });

            modelBuilder.Entity("SmartTestProj.DAL.Entities.ProductionFacility", b =>
                {
                    b.Navigation("EquipmentPlacementContract");
                });
#pragma warning restore 612, 618
        }
    }
}
